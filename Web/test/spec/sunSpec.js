// <reference path="../../typings/index.d.ts" />
// <reference path="../../scripts/time.ts" />
// <reference path="../../scripts/date.ts" />
// <reference path="../../scripts/sun.ts" />
describe('In the file sun.ts', function () {
    var sut;
    var date;
    var lat;
    var long;
    var position;
    var sunTimes;
    beforeEach(function () {
        date = new Date("2019-06-19");
        lat = 45.00;
        long = 2.67;
        position = { azimuth: -3.102702486267067, altitude: -0.37629863789588613 };
        sunTimes = {
            "solarNoon": "2019-06-19T11:51:52.202Z",
            "nadir": "2019-06-18T23:51:52.202Z",
            "sunrise": "2019-06-19T04:03:28.630Z",
            "sunset": "2019-06-19T19:40:15.773Z",
            "sunriseEnd": "2019-06-19T04:07:09.178Z",
            "sunsetStart": "2019-06-19T19:36:35.225Z",
            "dawn": "2019-06-19T03:26:02.738Z",
            "dusk": "2019-06-19T20:17:41.665Z",
            "nauticalDawn": "2019-06-19T02:36:16.761Z",
            "nauticalDusk": "2019-06-19T21:07:27.642Z",
            "nightEnd": "2019-06-19T01:30:12.240Z",
            "night": "2019-06-19T22:13:32.164Z",
            "goldenHourEnd": "2019-06-19T04:48:43.968Z",
            "goldenHour": "2019-06-19T18:55:00.435Z"
        };
        sut = new AstroLib.Sun();
    });
    describe('getSunPosition', function () {
        it('should have altitude= -0.37629863789588613 and azimuth= -3.102702486267067', function () {
            expect(sut.getSunPosition(date, lat, long)).toEqual(position);
        });
    });
    describe('getSunTimes', function () {
        it('should be equal to 2458653.5', function () {
            var solarNoon = '2019-06-19T11:51:52.202Z';
            var actual = sut.getSunTimes(date, lat, long);
            var actualSolarNoon = actual.solarNoon.toISOString();
            expect(actualSolarNoon).toEqual(solarNoon);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VuU3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN1blNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELDZDQUE2QztBQUM3Qyw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBRTVDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtJQUMzQixJQUFJLEdBQWlCLENBQUM7SUFFdEIsSUFBSSxJQUFJLENBQUM7SUFDVCxJQUFJLEdBQUcsQ0FBQztJQUNSLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLFFBQVEsQ0FBQztJQUViLFVBQVUsQ0FBQztRQUNQLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5QixHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ1osSUFBSSxHQUFHLElBQUksQ0FBQztRQUNaLFFBQVEsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7UUFFMUUsUUFBUSxHQUFHO1lBQ1AsV0FBVyxFQUFFLDBCQUEwQjtZQUN2QyxPQUFPLEVBQUUsMEJBQTBCO1lBQ25DLFNBQVMsRUFBRSwwQkFBMEI7WUFDckMsUUFBUSxFQUFFLDBCQUEwQjtZQUNwQyxZQUFZLEVBQUUsMEJBQTBCO1lBQ3hDLGFBQWEsRUFBRSwwQkFBMEI7WUFDekMsTUFBTSxFQUFFLDBCQUEwQjtZQUNsQyxNQUFNLEVBQUUsMEJBQTBCO1lBQ2xDLGNBQWMsRUFBRSwwQkFBMEI7WUFDMUMsY0FBYyxFQUFFLDBCQUEwQjtZQUMxQyxVQUFVLEVBQUUsMEJBQTBCO1lBQ3RDLE9BQU8sRUFBRSwwQkFBMEI7WUFDbkMsZUFBZSxFQUFFLDBCQUEwQjtZQUMzQyxZQUFZLEVBQUUsMEJBQTBCO1NBQ3pDLENBQUE7UUFFSCxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDdkIsRUFBRSxDQUFDLDRFQUE0RSxFQUFFO1lBQzdFLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDcEIsRUFBRSxDQUFDLDhCQUE4QixFQUFFO1lBQy9CLElBQUksU0FBUyxHQUFHLDBCQUEwQixDQUFDO1lBQzNDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM5QyxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXJELE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtBQUVOLENBQUMsQ0FBQyxDQUFDIn0=